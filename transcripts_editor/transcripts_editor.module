<?php
// $Id$

include_once 'transcripts_editor.index.inc';

function transcripts_editor_init() {
  drupal_add_library('system', 'ui.autocomplete');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'effects.blind');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/jquery.hoverIntent.js', 'file');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/jquery.ui.combobox.js', 'file');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/jquery.jeditable.js', 'file');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/jquery.jeditable.elastic.js', 'file');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/jquery.jeditable.combobox.js', 'file');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/jquery.elastic.source.js', 'file');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/transcripts_editor.js', 'file');
  drupal_add_css(drupal_get_path('module', 'transcripts_editor') .'/transcripts_editor.css', 'file');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/ui.spinner.js', 'file');
  drupal_add_js(drupal_get_path('module', 'transcripts_editor') .'/jquery.jeditable.spinner.js', 'file');
  drupal_add_css(drupal_get_path('module', 'transcripts_editor') .'/ui.spinner.css', 'file');
}

function transcripts_editor_menu() {
  $items = array();
  	
  $items['tcu/update'] = array(
  	'page callback' => 'transcripts_editor_update_tcu',
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
  );
  return $items;	
}

function transcripts_editor_update_tcu() {
	foreach ($_POST['tcus'] as $changed) {
		$tcu = tcu_load($changed['tcuid']); //check if exists?
		if (user_access('edit transcripts') && node_access('update', node_load($tcu->nid))) {
            $tcu->speaker = $changed['speaker'];
            $tcu->start = $changed['start'];
            $tcu->end = $changed['end'];
            $tcu->setTiers($changed['tiers']);
            tcu_save($tcu);
		}
	}
	drupal_json_output(array('status' => TRUE, 'data' => 'Success'));
}

function transcripts_editor_facetapi_facet_info(array $searcher_info) {
  $facets = array();

  // Facets are usually associated with the type of content stored in the index.
  //if (isset($searcher_info['types']['my_type'])) {

    $facets['fts_duration'] = array(
      'name' => 'fts_duration',
      'label' => t('Duration'),
      'description' => t('The duration of the time-coded fragment'),
      'field' => 'fts_duration',
      'field alias' => 'fts_duration',
      'field api name' => FALSE,
      'field api bundles' => array(),
      'query types' => array('term', 'numeric_range'),
      'dependency plugins' => array('role'),
      'default widget' => 'links',
      'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE),
      'facet missing allowed' => TRUE,
      'facet mincount allowed' => FALSE,
      'weight' => 0,
      'map callback' => 'transcripts_editor_map_duration',
      //error avoidance: apachesolr_index_key and widget_slider.inc assume map options has some content
      'map options' => array(
      		'index_type' => 'tfloat', 
      		'name' => 'duration',
      		'field' => array('type' => 'number_float'),
      		),
      'hierarchy callback' => FALSE,
      'values callback' => FALSE,
      'min callback' => FALSE,
      'max callback' => FALSE,
      'default sorts' => array(
        array('active', SORT_DESC),
        array('count', SORT_DESC),
        array('display', SORT_ASC),
      ),
    );
    
  return $facets;
}

function transcripts_editor_map_duration(array $values) {
	$map = array();
  foreach ($values as $value) {
    $range = explode(' TO ', trim($value, '{[]}'));
    if (2 == count($range)) {
    	$map[$value] = "Duration: ".$range[0]." to ".$range[1]." seconds";
    }
    else { //not a range
    	$map[$value] = $range[0];
    }
  }
	return $map;
}

function transcripts_editor_apachesolr_query_prepare(&$query) {
  // Add a sort on the node ID.
  $query->setAvailableSort('fts_duration', array(
    'title' => t('Duration'),
    'default' => 'asc',
  ));
}

function transcripts_editor_permission() {
  return array(
    'edit transcripts' => array(
    	'title' => t('Edit transcripts and timecodes'),
    ),
    'abandon transcript changes' => array(
      'title' => t('Abandon transcript changes'), 
      'description' => t('Return transcript to its original state by abandoning changes made to it online.'),
    ),
   );
}

function transcripts_editor_transcript_player_prepare_player($nid) {
	$blocked = FALSE;
	foreach (module_implements('transcripts_editor_disable_editing') as $module) {
		$blocked = module_invoke($module, 'transcripts_editor_disable_editing', $nid);
		//if hook returns TRUE then not allowed to edit
		if (!empty($blocked)) break;
	}
	$return = array(
		'editable' => !$blocked && user_access('edit transcripts') && node_access('update', node_load($nid)) ? true : false
	);
	drupal_add_js(array("transcripts_editor_$nid" => $return), 'setting');
}
