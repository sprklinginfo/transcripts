<?php
// $Id$

function transcripts_init() {
	drupal_add_css(drupal_get_path('module', 'transcripts') .'/transcripts.css', 'file');
	drupal_add_js(drupal_get_path('module', 'transcripts') .'/transcripts.js', 'file');
	module_load_include('inc', 'transcripts', 'transcripts.index');
}

function transcripts_environment() {
	return variable_get('transcripts_env_id', apachesolr_default_environment());
}

function transcripts_get_solr() {
	return apachesolr_get_solr(transcripts_environment());
}

function transcripts_theme() {
	return array(
		'apachesolr_search_snippets__tcu' => array(
			'variables' => array('doc' => NULL, 'snippets' => array()),
		),
	);
}

function theme_apachesolr_search_snippets__tcu($vars) {
	$doc = $vars['doc'];
	$snippets = $vars['snippets'];
	//$url = url($doc->path, array('fragment' => "tcu/" .$doc->entity_id));
	$result  = "<p>";
	if (isset($doc->fts_duration) && $doc->fts_duration > 0) {
		$result .= "<div class='sentence-result'>";
		$result .= "<div class='controls'><a href='$url'><span class='ui-icon ui-icon-play ui-state-default ui-corner-all'>Play</span></a></div>";
	}
	/* possible icons for untimed: ui-icon-arrowthick-1-ne, ui-icon-zoomin */
	else { //or 
		$result .= "<div class='sentence-result untimed'>";
		$result .= "<div class='controls'><a href='$url'><span class='ui-icon ui-icon-zoomin ui-state-default ui-corner-all'>Play</span></a></div>";
	}
	$result .= "<div class='tiers'>";
  
	$tiers = transcripts_all_tiers();
	foreach ($tiers as $tier) {
		$result .= "<div data-tier='$tier' class='tier'>" . (isset($snippets[$tier]) ? implode('...', $snippets[$tier]) : (isset($doc->{$tier}) ? $doc->{$tier} : '')) . "</div>";
	}
	$result .= "</div>"; //tiers
	$result .= "</div>"; //sentence-result
	return $result;
}

/**
 * Prepare the query by adding parameters, sorts, etc.
 *
 * This hook is invoked before the query is cached.  The cached query
 * is used after the search such as for building facet and sort blocks,
 * so parameters added during this hook may be visible to end users.
 *
 * This is otherwise the same as HOOK_apachesolr_query_alter(), but runs
 * before it.
 *
 * @param $query
 *  An object implementing DrupalSolrQueryInterface. No need for &.
 */
function transcripts_apachesolr_query_prepare($query) {  
  //should we really assume this is what people want?
  $filters = $query->getFilters('bundle');
  foreach ($filters as $filter) {
  	if ($filter['#value'] == 'tcu' && !$filter['#exclude']) {
			$query->removeAvailableSort('sort_label');
			$query->removeAvailableSort('bundle');
			$query->removeAvailableSort('sort_name');
			$query->removeAvailableSort('ds_created');
		
			// Add a sort on the transcript title
			$query->setAvailableSort('ss_node_label', array(
				'title' => t('Title'),
				'default' => 'asc',
			));  		
  	}
  }
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function transcripts_apachesolr_query_alter($query) {
  $query->addParams(array('fl' => array('ss_node_label', 'is_eid', 'entity_id', 'fts_duration')));
  $tiers = transcripts_all_tiers();
  if (count($tiers) > 0) {
  	$qf = array();
  	foreach ($tiers as $tier) {
  		$qf[] = $tier."^1.0";
  	}
  	$query->addParam('qf', implode(" ", $qf));
  	$query->addParams(array('fl' => $tiers));
  	$query->addParams(array('hl.fl' => $tiers));
  }
  $query->replaceParam('hl.simple.pre', variable_get('transcripts_hl_simple_pre', '<strong>'));
  $query->replaceParam('hl.simple.post', variable_get('transcripts_hl_simple_post', '</strong>'));
  $query->replaceParam('hl.fragsize', 0);
  $query->addParam('f.content.hl.fragsize', 100);
}

function transcripts_preprocess_search_result(&$variables) {
	$fields = $variables['result']['fields'];
	
	if ($fields['entity_type'] == 'tcu' && $fields['search_term'] != '') {
		$variables['result']['link'] = url($fields['path'], array('query' => array('term' => $fields['search_term']))); //needed for some themes
		$variables['url'] = url($fields['path'], array('query' => array('term' => $fields['search_term']))); //needed for other themes
	}
}

function transcripts_apachesolr_search_result_alter($doc, &$extra, $query) {
	if ($doc->entity_type == 'tcu') {
		$keyword = $query->getParam('q');
		$doc->search_term = $keyword ? $keyword : '';
	}
}

function transcripts_apachesolr_process_results(&$results, $query) {
	if (count($results) > 1) {
		$last = "";
		
		foreach ($results as &$result) {
			if ($result['entity_type'] == 'tcu') {
				$result['title'] = ($result['fields']['is_eid'] == $last) ? ' ' : $result['fields']['ss_node_label']; //calling unset causes problems
				$last = $result['fields']['is_eid'];
			}
			else {
				$last = "";
			}
		}
	}
}

/**
 * Implements hook_help().
 *
 * @see apachesolr_search_help()
 */
function transcripts_help($path, $arg) {
	switch ($path) {
		case 'admin/help#transcripts':
			return t('The Transcripts module helps users to manage, search, and display a corpus of audio or video files along with time-aligned transcription or annotation files.');
	}
}

function transcripts_permission() {
	$profiles = transcripts_all_profiles();
	$permissions = array();
	$permissions['view transcripts'] = array(
		'title' => t('View transcripts'),
	);
	$permissions['administer transcripts'] = array(
		'title' => t('Administer transcripts module, including managing profiles'),
	);
	foreach ($profiles as $profile) {
		$pid = $profile['pid'];
		$permissions["view profile $pid"] = array(
			'title' => t('View profile %pid', array('%pid' => $profile['pid']))
		);
	}
	return $permissions;
}

function transcripts_menu() {
	$items = array();
  	
	$items['admin/config/search/apachesolr/transcripts'] = array(
		'title' => 'Transcripts',
		'description' => t('Transcripts module settings'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('transcripts_site_settings_form'),
		'access arguments' => array('administer transcripts'),
		'file' => 'transcripts.admin.inc',
		'type' => MENU_LOCAL_TASK,
	);
	$items['admin/config/search/apachesolr/transcripts/%transcripts_profile'] = array(
		'title'              => 'Transcripts profile edit',
		'description'        => 'edit Transcripts profile',
		'page callback'      => 'drupal_get_form',
		'page arguments'     => array('transcripts_profile_edit_form', 5),
		'access arguments'   => array('administer transcripts'),
		'file' 							 => 'transcripts.admin.inc',
		'type'               => MENU_CALLBACK,
	);
	$items['admin/config/search/apachesolr/transcripts/%transcripts_profile/edit'] = array(
		'title'              => 'Edit',
		'weight'             => -20,
		'type'               => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['admin/config/search/apachesolr/transcripts/%transcripts_profile/delete'] = array(
		'title'              => 'Transcripts profile delete',
		'page callback'      => 'drupal_get_form',
		'page arguments'     => array('transcripts_profile_delete_form', 5),
		'access arguments'   => array('administer transcripts'),
		'file' 							 => 'transcripts.admin.inc',
		'type'               => MENU_CALLBACK,
	);
	$items['admin/config/search/apachesolr/transcripts/add'] = array(
		'title'              => 'Transcripts profile add',
		'description'        => 'add a Transcripts display profile',
		'page callback'      => 'drupal_get_form',
		'page arguments'     => array('transcripts_profile_edit_form', NULL),
		'access arguments'   => array('administer transcripts'),
		'file' 							 => 'transcripts.admin.inc',
		'type'               => MENU_CALLBACK,
	);
	$items['transcript/%'] = array(
		'page callback' => 'transcripts_redirect',
		'page arguments' => array(1),
		'access callback' => 'user_access',
		'access arguments' => 'view transcripts',
	);
	$items['transcript/%/tcu/%'] = array(
		'page callback' => 'transcripts_redirect',
		'page arguments' => array(1, 3),
		'access callback' => 'user_access',
		'access arguments' => 'view transcripts',
	);
	
	$profiles = transcripts_all_profiles();
	foreach ($profiles as $profile) {
		$pid = $profile['pid'];
		$menu = $profile['menu'];
		$items["transcripts/$menu/%"] = array(
			'title' => '',
			'page callback' => 'transcripts_controller_title',
			'page arguments' => array(2, $pid),
			'access callback' => 'user_access',
			'access arguments' => array("view profile $pid"),
		);
	}
	
	return $items;
}

function transcripts_redirect($trid, $tcuid = NULL) {
	$transcript = db_query("SELECT * FROM {transcripts_transcript} WHERE trid=:trid", array(':trid' => $trid))
		->fetchAssoc();
		
	if (count($transcript) > 0) {
		watchdog('Transcripts', 'Tcuid = '.$tcuid, NULL, WATCHDOG_WARNING);
		$fragment = ($tcuid === NULL) ? NULL : 'tcu/' .$tcuid;
		watchdog('Transcripts', 'Fragment = '.$fragment, NULL, WATCHDOG_WARNING);
		$redirect = $transcript['module'].'_redirect_transcript';
		$redirect($transcript, $fragment);
	}
}

function transcripts_goto($url, $menu_tail) {
	drupal_goto($url . '/' . $menu_tail);
}

function transcripts_all_tiers() {
	$val = trim(variable_get('transcripts_all_tiers', ''));
	return $val == '' ? array() : array_map('trim', explode(",", $val));
}

/* this should really be cached */
function transcripts_all_profiles($currentUser = FALSE) {
	$profiles = db_query("SELECT * FROM {transcripts_display_profile}")->fetchAllAssoc('pid', PDO::FETCH_ASSOC);
	foreach ($profiles as $pid => &$profile) {	
		$profile['tiers'] = unserialize($profile['tiers']);
		$profile['modes'] = unserialize($profile['modes']);
	}
	if ($currentUser) {
		$profiles = array_filter($profiles, "transcripts_profile_access_callback");
	}
  return $profiles;
}

function transcripts_profile_access_callback($profile) {
	$pid = $profile['pid'];
	if (user_access("view profile $pid")) {
		return TRUE;
	}
}

function transcripts_profile_load($pid) {
  $profiles = transcripts_all_profiles();
  return isset($profiles[$pid]) ? $profiles[$pid] : FALSE;
}

function transcripts_all_modes() {
  $modes = array();
  $hook = 'transcripts_info';
  foreach (module_implements($hook) as $module) {
    $function = $module.'_'.$hook;
    $values = $function();
    $modes[$module] = $values['name'];
  }
  return $modes;
}

/**
 * Implements hook_block_info().
 */
function transcripts_block_info() {
   $blocks=array();
   $blocks['transcript_search'] = array(
      'info' => 'Search Transcripts',
      'custom' => FALSE,
      );
   return $blocks;
}

function transcripts_block_view($delta) {
   switch($delta) { 
   case 'transcript_search':
      $block['subject'] = 'Search Transcripts';
      $block['content'] = transcript_search_form();
      return $block;
   }
}
   
function transcript_search_form() {
   module_load_include('inc','apachesolr','apachesolr_search.pages');
   global $base_path;
   $transcripts = apachesolr_search_page_load('transcripts');
   $transcript_search_form = drupal_get_form('apachesolr_search_custom_page_search_form', $transcripts);
   unset( $transcript_search_form['basic']['keys']['#title'] );
   unset( $transcript_search_form['basic']['retain-filters'] );
   $output = drupal_render($transcript_search_form);
   return $output;
}
